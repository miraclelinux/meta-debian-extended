diff --git a/man/pidof.8 b/man/pidof.8
index a4295b9..0501cc4 100644
--- a/man/pidof.8
+++ b/man/pidof.8
@@ -24,6 +24,7 @@ pidof -- find the process ID of a running program.
 .RB [ \-c ]
 .RB [ \-n ]
 .RB [ \-x ]
+.RB [ \-m ]
 .RB [ \-o
 .IR omitpid[,omitpid...] ]
 .RB [ \-o
@@ -64,6 +65,14 @@ a status of true or false to indicate whether a matching PID was found.
 .IP \-x
 Scripts too - this causes the program to also return process id's of
 shells running the named scripts.
+.IP -m
+When used with -o, will also omit any processes that have the same
+argv[0] and argv[1] as any explicitly omitted process ids. This can be
+used to avoid multiple shell scripts concurrently calling pidof returning
+each other's pids.
+.SH "EXIT STATUS"
+.TP
+.B 0
 .IP "-o \fIomitpid\fP"
 Tells \fIpidof\fP to omit processes with that process id. The special
 pid \fB%PPID\fP can be used to name the parent process of the \fIpidof\fP
@@ -85,7 +94,7 @@ the program behaves according to the name under which it is called.
 When \fIpidof\fP is invoked with a full pathname to the program it
 should find the pid of, it is reasonably safe. Otherwise it is possible
 that it returns PIDs of running programs that happen to have the same name
-as the program you're after but are actually other programs. Note 
+as the program you're after but are actually other programs. Note
 that the executable name of running processes is calculated with
 .BR readlink (2),
 so symbolic links to executables will also match.
diff --git a/src/killall5.c b/src/killall5.c
index 25b333e..545b8e3 100644
--- a/src/killall5.c
+++ b/src/killall5.c
@@ -128,6 +128,7 @@ typedef struct _s_nfs
 
 /* List of processes. */
 PROC *plist;
+PROC *olist;
 
 /* List of processes to omit. */
 OMIT *omit;
@@ -355,6 +356,20 @@ static void clear_mnt(void)
 	}
 }
 
+static void clear_omit(void)
+{
+	OMIT *o;
+	PROC *p;
+	for (o = omit; o; o = omit) {
+		omit = omit->next;
+		free(o);
+	}
+	for (p = olist; p; p = olist) {
+		olist = olist->next;
+		free(p);
+	}
+}
+
 /*
  *     Check if path is a shadow off a NFS partition.
  */
@@ -476,6 +491,7 @@ int readproc(int do_stat)
 	DIR		*dir;
 	FILE		*fp;
 	PROC		*p, *n;
+	OMIT		*o, *m;
 	struct dirent	*d;
 	struct stat	st;
 	char		path[PATH_MAX+1];
@@ -579,7 +595,7 @@ int readproc(int do_stat)
                                         "%*u %*u %*u %*u %*u %*d %*d "
                                         "%*d %*d %*d %*d %*u %*u %*d "
                                         "%*u %lu %lu",
-                                        process_status, 
+                                        process_status,
                                         &p->sid, &startcode, &endcode) != 4) {
 
 				p->sid = 0;
@@ -722,6 +738,17 @@ int readproc(int do_stat)
 		p->next = plist;
 		plist = p;
 		p->pid = pid;
+		/* Could be smarter, but it's a small list. */
+		m = omit;
+		for (o = omit; m; o = m) {
+			m = o->next;
+			if (o->pid == p->pid) {
+				n = (PROC*)xmalloc(sizeof(PROC));
+				*n = *p;
+				n->next = olist;
+				olist = n;
+			}
+		}
 	}
 	closedir(dir);
 
@@ -850,7 +877,7 @@ PIDQ_HEAD *pidof(char *prog)
 			if (!p->pathname) {
 				if (root)
 					continue;
-				goto fallback; 
+				goto fallback;
 			}
 			if (strcmp(prog, p->pathname)) {
 				int len = strlen(prog);
@@ -933,6 +960,26 @@ PIDQ_HEAD *pidof(char *prog)
 	return q;
 }
 
+int matches(PROC *o, PROC *p)
+{
+	int ret = 0;
+	char *oargv1, *pargv1;
+	if ((o->argv0 && p->argv0 && !strcmp(o->argv0,p->argv0))) {
+		if (o->argv1 && p->argv1) {
+			if ((oargv1 = canonicalize_file_name(o->argv1)) == NULL)
+				oargv1 = strdup(o->argv1);
+			if ((pargv1 = canonicalize_file_name(p->argv1)) == NULL)
+				pargv1 = strdup(p->argv1);
+			if (! strcmp(oargv1, pargv1)) {
+				ret = 1;
+			}
+			free(oargv1);
+			free(pargv1);
+		}
+	}
+	return ret;
+}
+
 /* Give usage message and exit. */
 void usage(void)
 {
@@ -982,6 +1029,7 @@ void nsyslog(int pri, char *fmt, ...)
 #define PIDOF_OMIT	0x02
 #define PIDOF_NETFS	0x04
 #define PIDOF_QUIET     0x08
+#define PIDOF_OMIT_OMIT_MATCHES        0x10
 
 /*
  *	Pidof functionality.
@@ -999,6 +1047,7 @@ int main_pidof(int argc, char **argv)
 	char		tmp[512];
         char            *format = NULL;
 
+	olist = (PROC*)0;
 	omit = (OMIT*)0;
 	nlist = (NFS*)0;
 	opterr = 0;
@@ -1006,7 +1055,7 @@ int main_pidof(int argc, char **argv)
 	if ((token = getenv("PIDOF_NETFS")) && (strcmp(token,"no") != 0))
 		flags |= PIDOF_NETFS;
 
-	while ((opt = getopt(argc,argv,"qhco:f:sxn")) != EOF) switch (opt) {
+	while ((opt = getopt(argc,argv,"qhcmo:f:sxn")) != EOF) switch (opt) {
 		case '?':
 			nsyslog(LOG_ERR,"invalid options on command line!\n");
 			closelog();
@@ -1047,13 +1096,16 @@ int main_pidof(int argc, char **argv)
 			break;
                 case 'q':
                         flags |= PIDOF_QUIET;
-                        break; 
+                        break;
 		case 's':
 			flags |= PIDOF_SINGLE;
 			break;
 		case 'x':
 			scripts_too++;
 			break;
+		case 'm':
+			flags |= PIDOF_OMIT_OMIT_MATCHES;
+			break;
 		case 'n':
 			flags |= PIDOF_NETFS;
 			break;
@@ -1085,10 +1137,13 @@ int main_pidof(int argc, char **argv)
 			pid_t spid = 0;
 			while ((p = get_next_from_pid_q(q))) {
 				if ((flags & PIDOF_OMIT) && omit) {
-					OMIT * optr;
-					for (optr = omit; optr; optr = optr->next) {
+					PROC * optr;
+					for (optr = olist; optr; optr = optr->next) {
 						if (optr->pid == p->pid)
 							break;
+						if (flags & PIDOF_OMIT_OMIT_MATCHES)
+							if (matches(optr, p))
+								break;
 					}
 
 					/*
@@ -1131,10 +1186,11 @@ int main_pidof(int argc, char **argv)
 	}
 	if (!first)
         {
-            if ( ~flags & PIDOF_QUIET ) 
+            if ( ~flags & PIDOF_QUIET )
 		printf("\n");
         }
 
+	clear_omit();
 	clear_mnt();
 
 	closelog();
